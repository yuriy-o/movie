{"version":3,"file":"static/js/551.9545c80a.chunk.js","mappings":"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","sources":["features/Movies/MoviesFilter.tsx","features/Movies/MovieCard.tsx","features/Movies/Movies.tsx","hooks/useIntersectionObserver.ts"],"sourcesContent":["import {\n  Autocomplete,\n  Button,\n  Checkbox,\n  FormControl,\n  FormControlLabel,\n  FormGroup,\n  FormLabel,\n  Paper,\n  Skeleton,\n  TextField,\n  debounce,\n} from \"@mui/material\";\nimport FilterAltOutlinedIcon from \"@mui/icons-material/FilterAltOutlined\";\nimport { useMemo, useState } from \"react\";\nimport { Controller, useForm } from \"react-hook-form\";\nimport { KeywordItem, useGetGenresQuery, useGetKeywordsQuery } from \"../../services/tmdb\";\n\nexport interface Filters {\n  keywords: KeywordItem[];\n  genres: number[];\n}\n\ninterface MoviesFilterProps {\n  onApply(filters: Filters): void;\n}\n\nexport function MoviesFilter({ onApply }: MoviesFilterProps) {\n  const { control, handleSubmit, formState } = useForm<Filters>({\n    defaultValues: {\n      keywords: [],\n      genres: [],\n    },\n  });\n\n  const [keywordsQuery, setKeywordsQuery] = useState<string>(\"\");\n  const { data: keywordsOptions = [], isLoading: keywordsLoading } = useGetKeywordsQuery(keywordsQuery, { skip: !keywordsQuery });\n  const { data: genres, isLoading: genresLoading } = useGetGenresQuery();\n\n  const debouncedFetchKeywordsOptions = useMemo(\n    () =>\n      debounce((query: string) => {\n        setKeywordsQuery(query);\n      }, 1000),\n    []\n  );\n\n  return (\n    <Paper sx={{ m: 2, p: 0.5, maxWidth: 350 }}>\n      <form onSubmit={handleSubmit(onApply)}>\n        <FormControl sx={{ m: 2, display: \"block\" }} component=\"fieldset\" variant=\"standard\">\n          <Controller\n            name=\"keywords\"\n            control={control}\n            render={({ field: { onChange, value } }) => (\n              <Autocomplete\n                multiple\n                loading={keywordsLoading}\n                disablePortal\n                options={keywordsOptions}\n                filterOptions={(x) => x}\n                getOptionLabel={(option) => option.name}\n                onChange={(_, value) => onChange(value)}\n                value={value}\n                isOptionEqualToValue={(option, value) => option.id === value.id}\n                onInputChange={(_, value) => debouncedFetchKeywordsOptions(value)}\n                renderInput={(params) => <TextField {...params} label=\"Keywords\" />}\n              />\n            )}\n          />\n        </FormControl>\n        <FormControl sx={{ m: 2, display: \"block\" }} component=\"fieldset\" variant=\"standard\">\n          {genresLoading ? (\n            <Skeleton width={300} height={480} />\n          ) : (\n            <>\n              <FormLabel component=\"legend\">Genres</FormLabel>\n              <FormGroup sx={{ maxHeight: 500 }}>\n                <Controller\n                  name=\"genres\"\n                  control={control}\n                  render={({ field }) => (\n                    <>\n                      {genres?.map((genre) => (\n                        <FormControlLabel\n                          key={genre.id}\n                          control={\n                            <Checkbox\n                              value={genre.id}\n                              checked={field.value.includes(genre.id)}\n                              onChange={(event, checked) => {\n                                const valueNumber = Number(event.target.value);\n                                if (checked) {\n                                  field.onChange([...field.value, valueNumber]);\n                                } else {\n                                  field.onChange(field.value.filter((value) => value !== valueNumber));\n                                }\n                              }}\n                            />\n                          }\n                          label={genre.name}\n                        />\n                      ))}\n                    </>\n                  )}\n                />\n              </FormGroup>\n            </>\n          )}\n        </FormControl>\n        <Button type=\"submit\" sx={{ m: 2 }} variant=\"contained\" startIcon={<FilterAltOutlinedIcon />} disabled={!formState.isDirty}>\n          Apply filter\n        </Button>\n      </form>\n    </Paper>\n  );\n}\n","import { Button, Card, CardActions, CardContent, CardMedia, IconButton, Tooltip, Typography } from \"@mui/material\";\nimport FavoriteIcon from \"@mui/icons-material/Favorite\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport { memo } from \"react\";\n\ninterface MovieCardProps {\n  id: number;\n  title: string;\n  popularity: number;\n  overview: string;\n  image?: string;\n  enableUserActions?: boolean;\n  onAddToFavorite?(id: number): void;\n}\n\nfunction MovieCard({ id, title, overview, popularity, onAddToFavorite, image = \"/movie-thumb.png\", enableUserActions = false }: MovieCardProps) {\n  console.count(\"MovieCard\");\n\n  return (\n    <Card sx={{ height: \"100%\", display: \"flex\", flexDirection: \"column\" }}>\n      <CardMedia component=\"div\" sx={{ pt: \"56.25%\" }} image={image} />\n      <CardContent sx={{ flexGrow: 1 }}>\n        <Typography gutterBottom variant=\"h5\" component=\"h2\">\n          {title}\n        </Typography>\n        <Typography variant=\"body2\" color=\"text.secondary\">\n          {overview}\n        </Typography>\n        <Typography variant=\"button\" display=\"block\" mt={2}>\n          {popularity}\n        </Typography>\n      </CardContent>\n      <CardActions>\n        <Button component={RouterLink} to={`/movies/${id}`} color=\"secondary\">\n          Details\n        </Button>\n        {enableUserActions && (\n          <Tooltip title=\"Add to favorites\">\n            <IconButton onClick={() => onAddToFavorite?.(id)}>\n              <FavoriteIcon />\n            </IconButton>\n          </Tooltip>\n        )}\n      </CardActions>\n    </Card>\n  );\n}\n\nexport default memo(MovieCard);\n","import { useCallback, useContext, useState } from \"react\";\nimport { Container, Grid, LinearProgress, Typography } from \"@mui/material\";\nimport { AuthContext, anonymousUser } from \"../../AuthContext\";\nimport { useIntersectionObserver } from \"../../hooks/useIntersectionObserver\";\nimport { MoviesFilter } from \"./MoviesFilter\";\nimport MovieCard from \"./MovieCard\";\nimport { useGetMoviesQuery, useGetConfigurationQuery, MoviesQuery } from \"../../services/tmdb\";\n\nconst initialQuery = {\n  page: 1,\n  filters: {},\n};\n\nfunction Movies() {\n  const [query, setQuery] = useState<MoviesQuery>(initialQuery);\n\n  const { data: configuration } = useGetConfigurationQuery();\n  const { data, isFetching } = useGetMoviesQuery(query);\n  const movies = data?.results;\n  const hasMorePages = data?.hasMorePages;\n\n  function formatImageUrl(imagePath?: string | null) {\n    return imagePath && configuration ? `${configuration.images.base_url}w780${imagePath}` : undefined;\n  }\n\n  const auth = useContext(AuthContext);\n  const loggedIn = auth.user !== anonymousUser;\n\n  const onIntersect = useCallback(() => {\n    if (hasMorePages) {\n      setQuery((q) => ({ ...q, page: q.page + 1 }));\n    }\n  }, [hasMorePages]);\n\n  const [targetRef] = useIntersectionObserver({ onIntersect });\n\n  const handleAddToFavorites = useCallback(\n    (id: number): void => alert(`Not implemented! Action: ${auth.user.name} is adding movie ${id} to favorites.`),\n    [auth.user.name]\n  );\n\n  return (\n    <Grid container spacing={2} sx={{ flexWrap: \"nowrap\" }}>\n      <Grid item xs=\"auto\">\n        <MoviesFilter\n          onApply={(filters) => {\n            const moviesFilters = {\n              keywords: filters?.keywords.map((k) => k.id),\n              genres: filters?.genres,\n            };\n\n            setQuery({\n              page: 1,\n              filters: moviesFilters,\n            });\n          }}\n        />\n      </Grid>\n      <Grid item xs={12}>\n        <Container sx={{ py: 8 }} maxWidth=\"lg\">\n          {!isFetching && !movies?.length && <Typography variant=\"h6\">No movies were found that match your query.</Typography>}\n          <Grid container spacing={4}>\n            {movies?.map((m, i) => (\n              <Grid item key={m.id} xs={12} sm={6} md={4}>\n                <MovieCard\n                  key={m.id}\n                  id={m.id}\n                  title={m.title}\n                  overview={m.overview}\n                  popularity={m.popularity}\n                  image={formatImageUrl(m.backdrop_path)}\n                  enableUserActions={loggedIn}\n                  onAddToFavorite={handleAddToFavorites}\n                />\n              </Grid>\n            ))}\n          </Grid>\n          <div ref={targetRef}>{isFetching && <LinearProgress color=\"secondary\" sx={{ mt: 3 }} />}</div>\n        </Container>\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default Movies;\n","import { useRef, useState, useEffect, MutableRefObject } from \"react\";\n\ninterface Options {\n  root?: Element;\n  rootMargin?: string;\n  threshold?: number;\n  onIntersect?(): void;\n}\n\ntype HookReturnType = [MutableRefObject<null>, IntersectionObserverEntry?];\n\nexport function useIntersectionObserver(options: Options = {}): HookReturnType {\n  const { threshold = 1.0, root = null, rootMargin = \"0px\", onIntersect } = options;\n\n  const targetRef = useRef(null);\n  const [entry, setEntry] = useState<IntersectionObserverEntry>();\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(\n      (entries: IntersectionObserverEntry[]) => {\n        const [entry] = entries;\n        if (entry.isIntersecting) {\n          onIntersect?.();\n        }\n        setEntry(entry);\n      },\n      { threshold, root, rootMargin }\n    );\n    const currentRef = targetRef.current;\n\n    if (currentRef) {\n      observer.observe(currentRef);\n    }\n\n    return function () {\n      if (currentRef) {\n        observer.disconnect();\n      }\n    };\n  }, [onIntersect, root, rootMargin, threshold]);\n\n  return [targetRef, entry];\n}\n"],"names":["MoviesFilter","_ref","onApply","control","handleSubmit","formState","useForm","defaultValues","keywords","genres","keywordsQuery","setKeywordsQuery","useState","data","keywordsOptions","isLoading","keywordsLoading","useGetKeywordsQuery","skip","genresLoading","useGetGenresQuery","debouncedFetchKeywordsOptions","useMemo","debounce","query","_jsx","Paper","sx","m","p","maxWidth","children","_jsxs","onSubmit","FormControl","display","component","variant","Controller","name","render","_ref2","field","onChange","value","Autocomplete","multiple","loading","disablePortal","options","filterOptions","x","getOptionLabel","option","_","isOptionEqualToValue","id","onInputChange","renderInput","params","TextField","label","Skeleton","width","height","_Fragment","FormLabel","FormGroup","maxHeight","_ref3","map","genre","FormControlLabel","Checkbox","checked","includes","event","valueNumber","Number","target","filter","Button","type","startIcon","FilterAltOutlinedIcon","disabled","isDirty","MovieCard","title","overview","popularity","onAddToFavorite","image","enableUserActions","console","count","Card","flexDirection","CardMedia","pt","CardContent","flexGrow","Typography","gutterBottom","color","mt","CardActions","RouterLink","to","concat","Tooltip","IconButton","onClick","FavoriteIcon","memo","initialQuery","page","filters","setQuery","configuration","useGetConfigurationQuery","isFetching","useGetMoviesQuery","movies","results","hasMorePages","auth","useContext","AuthContext","loggedIn","user","anonymousUser","onIntersect","useCallback","q","targetRef","arguments","length","undefined","threshold","root","rootMargin","useRef","entry","setEntry","useEffect","observer","IntersectionObserver","entries","isIntersecting","currentRef","current","observe","disconnect","useIntersectionObserver","handleAddToFavorites","alert","Grid","container","spacing","flexWrap","item","xs","moviesFilters","k","Container","py","i","sm","md","imagePath","backdrop_path","images","base_url","ref","LinearProgress"],"sourceRoot":""}